# ----------------------------------------------------------------------------------------------------
# Template to deploy a pre-built Azure Function artifact to one environment
# ----------------------------------------------------------------------------------------------------
parameters: 
- name: variableGroupName
  default:  'myVariableGroup'
- name: environmentName
  default:  'DEV'

# ----------------------------------------------------------------------------------------------------
jobs:
- deployment: InitializeDeploy${{ parameters.environmentName }}Function
  displayName: Initialize Deploy ${{ parameters.environmentName }} Function
  environment: ${{ parameters.environmentName }}

- job: Deploy${{ parameters.environmentName }}Function
  displayName: Deploy ${{ parameters.environmentName }} Function
  variables:
    - group: ${{ parameters.variableGroupName }}
    - name: environmentName
      value: ${{ parameters.environmentName }}

    # use the environment value to determine which resource group we should deploy to
    - ${{ if eq(variables.environmentNameUpper, 'DEV') }}:
      - name: subscriptionName
        value: $(subscriptionNameDev)
    - ${{ if eq(variables.environmentNameUpper, 'PROD') }}:
      - name: subscriptionName
        value: $(subscriptionNameProd)

  steps:
  - bash: |
      functionAppName=$(echo "$(orgName)-$(appName)-$(functionName)-$(environmentName)" | tr '[:upper:]' '[:lower:]')
      echo "##vso[task.setvariable variable=functionAppName]$functionAppName"
    displayName: 'Create Variables'

  - task: DownloadPipelineArtifact@2
    displayName: 'Download Pipeline Artifacts'
    inputs:
      artifact: drop

  - task: CmdLine@2
    inputs:
      script: |
        echo "subscriptionName=$(subscriptionName)"
        echo "subscriptionNameDev=$(subscriptionNameDev)"
        echo "subscriptionNameProd=$(subscriptionNameProd)"
        echo "environmentName=$(environmentName)"
        echo "functionAppName=$(functionAppName)"
        echo "Directory of pipeline workspace:"
        tree $(Pipeline.Workspace)
    displayName: 'Display Variables and Tree'
    continueOnError: true

  # ----------------------------------------------------------------------------------------------------
  # This works to deploy to two environments, but is not DRY! (Don't repeat yourself!)
  # The subscriptionName variable doesn't like to be set dynamically for some reason
  # ----------------------------------------------------------------------------------------------------
  - ${{ if eq(variables.environmentNameUpper, 'DEV') }}:
    - task: AzureFunctionApp@1
      displayName: 'Function App Deploy'
      retryCountOnTaskFailure: 2
      inputs:
        azureSubscription: $(subscriptionNameDev)
        appType: functionAppLinux
        appName: $(functionAppName)
        package: $(Pipeline.Workspace)/*.zip

  # ----------------------------------------------------------------------------------------------------
  - ${{ if eq(variables.environmentNameUpper, 'PROD') }}:
    - task: AzureFunctionApp@1
      displayName: 'Function App Deploy'
      retryCountOnTaskFailure: 2
      inputs:
        azureSubscription: $(subscriptionNameProd)
        appType: functionAppLinux
        appName: $(functionAppName)
        package: $(Pipeline.Workspace)/*.zip
