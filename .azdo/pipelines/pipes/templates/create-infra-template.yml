# ----------------------------------------------------------------------------------------------------
# Template to deploy Azure Resources for one environment
# ----------------------------------------------------------------------------------------------------
parameters:
- name: variableGroupName
  default: 'myVariableGroup'
- name: environmentName
  default: 'DEV'
- name: templateFolderName
  default: 'infra/Bicep'
- name: templateFileName
  default: 'main.bicep'

# ----------------------------------------------------------------------------------------------------
jobs:
- deployment: CreateInfra
  displayName: Initialize Create Infra
  environment: ${{ parameters.environmentName }}

- job: CreateInfraJob
  displayName: Create Infrastructure
  variables:
    - group: ${{ parameters.variableGroupName }}
    - name: environmentNameUpper
      value: ${{ upper(parameters.environmentName) }}
    - name: environmentNameLower
      value: ${{ lower(parameters.environmentName) }}
    - name: templateFile
      value: '$(Pipeline.Workspace)/s/${{ parameters.templateFolderName }}/${{ parameters.templateFileName }}'
    - name: compiledJsonFile
      value: '${{ parameters.templateFolderName }}/compiled.json'

    # use the environment value to determine which resource group we should deploy to
    - ${{ if eq(variables.environmentNameUpper, 'DEV') }}:
      - name: resourceGroupName
        value: $(resourceGroupNameDev)
    - ${{ if eq(variables.environmentNameUpper, 'PROD') }}:
      - name: resourceGroupName
        value: $(resourceGroupNameProd)

  steps:
  - bash: |
      runDateTime=$(echo $(date '+%Y%m%d-%H%M%S'))
      echo "##vso[task.setvariable variable=runDateTime]$runDateTime"
      echo "runDateTime=$runDateTime"
                                   
      runDateTimeZ=$(echo $(date '+%Y%m%dT%H%M%SZ'))
      echo "##vso[task.setvariable variable=runDateTimeZ]$runDateTimeZ"
      echo "runDateTimeZ=$runDateTimeZ"
    displayName: 'Create Variables'
    continueOnError: true

  - bash: |
      echo "environmentNameUpper=$(environmentNameUpper)"
      echo "environmentNameLower=$(environmentNameLower)"
      echo "subscriptionNameDev=$(subscriptionNameDev)"
      echo "subscriptionNameProd=$(subscriptionNameProd)"
      echo "resourceGroupNameDev=$(resourceGroupNameDev)"
      echo "resourceGroupNameProd=$(resourceGroupNameProd)"
      echo "location=$(location)"
      echo "orgName=$(orgName)"
      echo "appName=$(appName)"
      echo "storageSku=$(storageSku)"
      echo "functionName=$(functionName)"
      echo "functionAppSku=$(functionAppSku)"
      echo "functionAppSkuFamily=$(functionAppSkuFamily)"
      echo "functionAppSkuTier=$(functionAppSkuTier)"
      echo "keyVaultOwnerUserId=$(keyVaultOwnerUserId)"
      echo "keyVaultOwnerIpAddress=$(keyVaultOwnerIpAddress)"
      echo "runDateTime=$(runDateTime)"
      echo "runDateTimeZ=$(runDateTimeZ)"
      echo "templateFile=$(templateFile)"
      echo "compiledJsonFile=$(compiledJsonFile)"
      echo "Resource Group Command:"
      echo "  az group create --name $(resourceGroupName) --location $(location) --tags LastDeployed=$(runDateTime) Organization=$(orgName) Application=$(appName) Environment=$(environmentNameUpper)"
      echo "Bicep Deploy Sample Command:"
      echo "  az deployment group create -n main-deploy-$(runDateTimeZ) --resource-group $(resourceGroupName) --template-file 'main.bicep' --parameters environmentCode $(environmentNameLower) location $(location) orgName $(orgName) appName $(appName) storageSku $(storageSku) functionName $(functionName) functionAppSku $(functionAppSku) functionAppSkuFamily $(functionAppSkuFamily) functionAppSkuTier $(functionAppSkuTier) keyVaultOwnerUserId $(keyVaultOwnerUserId) runDateTime $(runDateTime)"
    displayName: 'Display Variables'
    continueOnError: true

  # Login is needed if you are pulling Bicep files from an Azure Container Registry
  # -script: az login --service-principal -u $(principalId) -p $(clientSecret) --tenant $(tenantId)
  #   displayName: 'az login'

  # - script: az bicep build --file $(templateFile) --outfile $(compiledJsonFile)
  #   displayName: 'Compile Bicep file'

  # ----------------------------------------------------------------------------------------------------
  # This works to deploy to two environments, but is not DRY! (Don't repeat yourself!)
  # You will need one of these for each subscription you want to deploy to
  # The subscriptionName variable doesn't like to be set dynamically for some reason
  # ----------------------------------------------------------------------------------------------------
  - ${{ if eq(variables.environmentNameUpper, 'DEV') }}:
    - task: AzureCLI@2
      displayName: 'Create Resource Group'
      inputs:
        azureSubscription: $(subscriptionNameDev)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az group create --name $(resourceGroupName) --location $(location) --tags LastDeployed=$(runDateTime) Organization=$(orgName) Application=$(appName) Environment=$(environmentNameUpper)

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Publish Bicep Resources'
      inputs:
        csmFile: $(templateFile)
        overrideParameters: >
          -orgName $(orgName)
          -appName $(appName)
          -environmentCode $(environmentNameLower)
          -keyVaultOwnerUserId $(keyVaultOwnerUserId)
          -keyVaultOwnerIpAddress $(keyVaultOwnerIpAddress)
          -location $(location)
          -storageSku $(storageSku)
          -functionName $(functionName)
          -functionAppSku $(functionAppSku)
          -functionAppSkuFamily $(functionAppSkuFamily)
          -functionAppSkuTier $(functionAppSkuTier)
          -runDateTime $(runDateTime)
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '$(subscriptionNameDev)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroupName)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        deploymentMode: 'Incremental'

  # ----------------------------------------------------------------------------------------------------
  - ${{ if eq(variables.environmentNameUpper, 'PROD') }}:
    - task: AzureCLI@2
      displayName: 'Create Resource Group'
      inputs:
        azureSubscription: $(subscriptionNameProd)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az group create --name $(resourceGroupName) --location $(location) --tags LastDeployed=$(runDateTime) Organization=$(orgName) Application=$(appName) Environment=$(environmentNameUpper)

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Publish Bicep Resources'
      inputs:
        csmFile: $(templateFile)
        overrideParameters: >
          -orgName $(orgName)
          -appName $(appName)
          -environmentCode $(environmentNameLower)
          -keyVaultOwnerUserId $(keyVaultOwnerUserId)
          -keyVaultOwnerIpAddress $(keyVaultOwnerIpAddress)
          -location $(location)
          -storageSku $(storageSku)
          -functionName $(functionName)
          -functionAppSku $(functionAppSku)
          -functionAppSkuFamily $(functionAppSkuFamily)
          -functionAppSkuTier $(functionAppSkuTier)
          -runDateTime $(runDateTime)
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '$(subscriptionNameProd)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroupName)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        deploymentMode: 'Incremental'
